// api.js
import axios from "axios";
import { getAccessToken, setAccessToken, clearAccessToken } from "../utils/auth";

const apiClient = axios.create({
  baseURL: "http://localhost:8080/e2rent",
  headers: {
    "Content-Type": "application/json",
  },
  withCredentials: true, // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ, —â–æ–± –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ cookie –∑ refresh —Ç–æ–∫–µ–Ω–æ–º
});

// ‚úÖ –î–æ–¥–∞—î–º–æ access_token –¥–æ –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É, —â–æ –Ω–µ —î open-api
apiClient.interceptors.request.use((config) => {
  const token = getAccessToken();
  console.log("access_token:", token)

  // üîé –õ–æ–≥ –≤—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
  console.log("‚û°Ô∏è –ó–∞–ø–∏—Ç:", {
    url: config.baseURL + config.url,
    method: config.method,
    headers: {
      ...config.headers,
      Authorization: token ? `Bearer ${token}` : undefined,
    },
    data: config.data,
  });

  // –®–ª—è—Ö–∏, —è–∫—ñ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  const openApiPaths = [
    "/users/api/v1/register",
    "/auth/api/v1/login",
    "/auth/api/v1/refresh",
    "/equipments/api/v1/all"
  ];

  const url = config.url?.replace(apiClient.defaults.baseURL, "") || "";
  const isOpenApi = openApiPaths.some((path) => url.startsWith(path));

  if (!isOpenApi && token) {
    config.headers.Authorization = `Bearer ${token}`;
  }

  return config;
});

// üîÅ –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–≤—Å—è ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
apiClient.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    if (error.response?.status === 403 && !originalRequest._retry) { // —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—è
      console.log("Is error.response?.status === 403 ", error.response?.status === 403);
      console.log("Is !originalRequest._retry ", !originalRequest._retry);
      originalRequest._retry = true;

      try {
        const response = await refreshToken(); // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π access_token
        const newToken = response.access_token;

        setAccessToken(newToken); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
        originalRequest.headers.Authorization = `Bearer ${newToken}`; // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫

        return apiClient(originalRequest); // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
      } catch (refreshError) {
        // –Ø–∫—â–æ refresh –Ω–µ –≤–¥–∞–≤—Å—è ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –∞–±–æ –æ—á–∏—â–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
        clearAccessToken();
        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(error);
  }
);

export default apiClient;

export const registerUser = async (userData) => {
  try {
    const response = await apiClient.post("/users/api/v1/register", userData);
    return response.data; // –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
  } catch (error) {
    // –ü–µ—Ä–µ–¥–∞—î–º–æ –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏
    if (error.response) {
      throw error.response; // –ö–∏–¥–∞—î–º–æ –≤—Å—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —Å–µ—Ä–≤–µ—Ä–∞
    }
    throw new Error("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫"); // –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞
  }
};

export const logInUser = async (userData) => {
  try {
    const body = { username: userData.email, password: userData.password };
    const response = await apiClient.post("/auth/api/v1/login", body);
    console.log("Login Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("Login Error:", error.response || error);
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    if (error.response) {
      console.error("Server responded with an error:", error.response.status);
      throw error.response;
    }
    console.error("No response from server");
    throw new Error("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫");
  }
};

export const logOutUser = async () => {
  try {
    const response = await apiClient.post("/auth/api/v1/logout");
    console.log("Logout successful:", response.status);
    return response.status;
  } catch (error) {
    console.error("Logout Error:", error.response || error);
    if (error.response) {
      console.error("Server responded with an error:", error.response.status);
      throw error.response;
    }
    throw new Error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ —Å–∏—Å—Ç–µ–º–∏");
  }
};

export const refreshToken = async () => {
  try {
    const response = await apiClient.post("/auth/api/v1/refresh", null);
    return response.data; // –ù–æ–≤–∏–π access_token —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  } catch (error) {
    if (error.response) {
      throw error.response;
    }
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω");
  }
};