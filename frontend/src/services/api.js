// api.js
import axios from "axios";
import { getAccessToken, setAccessToken, clearAccessToken } from "../utils/auth";

const apiClient = axios.create({
  baseURL: "http://localhost:8080/e2rent",
  headers: {
    "Content-Type": "application/json",
  },
  withCredentials: true, // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ, —â–æ–± –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ cookie –∑ refresh —Ç–æ–∫–µ–Ω–æ–º
});

// ‚úÖ –î–æ–¥–∞—î–º–æ access_token –¥–æ –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É, —â–æ –Ω–µ —î open-api
apiClient.interceptors.request.use((config) => {
  const token = getAccessToken();

  // üîé –õ–æ–≥ –≤—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
  console.log("‚û°Ô∏è –ó–∞–ø–∏—Ç:", {
    url: config.baseURL + config.url,
    method: config.method,
    headers: {
      ...config.headers,
      Authorization: token ? `Bearer ${token}` : undefined,
    },
    data: config.data,
  });

  // –®–ª—è—Ö–∏, —è–∫—ñ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  const openApiPaths = [
    "/users/api/v1/register",
    "/auth/api/v1/login",
    "/auth/api/v1/refresh",
    "/equipments/api/v1/all"
  ];

  const url = config.url?.replace(apiClient.defaults.baseURL, "") || "";
  const isOpenApi = openApiPaths.some((path) => url.startsWith(path));

  if (!isOpenApi && token) {
    config.headers.Authorization = `Bearer ${token}`;
  }

  return config;
});

// üîÅ –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–≤—Å—è ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
apiClient.interceptors.response.use(
  (response) => response,
  async (error) => {
    // –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
    console.log("üìõ Interceptor error details:", {
      hasResponse: !!error.response,
      status: error.response?.status,
      code: error.code,
      message: error.message,
    });
    const originalRequest = error.config;
    const status = error.response?.status;
    if ((status === 401 || status === 403) && !originalRequest._retry) { // —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—è
      originalRequest._retry = true;

      try {
        const response = await refreshToken(); // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π access_token
        const newToken = response.access_token;

        setAccessToken(newToken); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
        originalRequest.headers.Authorization = `Bearer ${newToken}`; // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫

        return apiClient(originalRequest); // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
      } catch (refreshError) {
        // –Ø–∫—â–æ refresh –Ω–µ –≤–¥–∞–≤—Å—è ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –∞–±–æ –æ—á–∏—â–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
        clearAccessToken();
        return Promise.reject(refreshError);
      }
    }
    return Promise.reject(error);
  }
);

export default apiClient;

export const registerUser = async (userData) => {
  try {
    const response = await apiClient.post("/users/api/v1/register", userData);
    return response.data; // –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
  } catch (error) {
    // –ü–µ—Ä–µ–¥–∞—î–º–æ –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏
    if (error.response) {
      throw error.response; // –ö–∏–¥–∞—î–º–æ –≤—Å—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —Å–µ—Ä–≤–µ—Ä–∞
    }
    throw new Error("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫"); // –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞
  }
};

export const logInUser = async (userData) => {
  try {
    const body = { username: userData.email, password: userData.password };
    const response = await apiClient.post("/auth/api/v1/login", body);
    console.log("Login Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("Login Error:", error.response || error);
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    if (error.response) {
      console.error("Server responded with an error:", error.response.status);
      throw error.response;
    }
    console.error("No response from server");
    throw new Error("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫");
  }
};

export const logOutUser = async () => {
  try {
    const response = await apiClient.post("/auth/api/v1/logout");
    console.log("Logout successful:", response.status);
    return response.status;
  } catch (error) {
    console.error("Logout Error:", error.response || error);
    if (error.response) {
      console.error("Server responded with an error:", error.response.status);
      throw error.response;
    }
    throw new Error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ —Å–∏—Å—Ç–µ–º–∏");
  }
};

export const refreshToken = async () => {
  try {
    const response = await apiClient.post("/auth/api/v1/refresh", null);
    return response.data; // –ù–æ–≤–∏–π access_token —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  } catch (error) {
    if (error.response) {
      throw error.response;
    }
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω");
  }
};

export const fetchAllEquipments = async () => {
  try {
    const response = await apiClient.get("/equipments/api/v1/all");
    return response.data.content; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
  } catch (error) {
    if (error.response) {
      throw error.response;
    }
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è");
  }
};

export const fetchMyEquipments = async () => {
  try {
    const response = await apiClient.get("/equipments/api/v1/my");
    return response.data.content; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
  } catch (error) {
    if (error.response) {
      throw error.response;
    }
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è");
  }
};

export const fetchEquipmentById = async (id) => {
  try {
    const response = await apiClient.get(`/equipments/api/v1/${id}`);
    console.log("response from fetchEquipmentById ", response)
    return response.data;
  } catch (error) {
    if (error.response) {
      throw error.response;
    }
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è");
  }
};

export const fetchImageById = async (id) => {
  try {
    const response = await apiClient.get(`/equipments/api/v1/images/${id}`, {
      responseType: "blob", // ‚ö†Ô∏è –æ–±–æ–≤'—è–∑–∫–æ–≤–æ, –±–æ —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    });
    return URL.createObjectURL(response.data); // –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∏–π url
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", error);
    throw error;
  }
};

export const registerEquipment = async (equipmentDto, file) => {
  try {
    const formData = new FormData();
    formData.append("equipmentDto", new Blob([JSON.stringify(equipmentDto)], { type: "application/json" }));
    if (file) {
      formData.append("main-image", file);
    }

    const response = await apiClient.post("/equipments/api/v1/register", formData, {
      headers: {
        "Content-Type": "multipart/form-data", // –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ, axios —Å–∞–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å, –∞–ª–µ –º–æ–∂–Ω–∞ —è–≤–Ω–æ
      },
    });

    return response.data;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è:", error);
    throw error;
  }
};

export const updateEquipment = async (id, equipmentDto) => {
  try {
    const formData = new FormData();
    formData.append("equipmentDto", new Blob([JSON.stringify(equipmentDto)], { type: "application/json" }));

    const response = await apiClient.put(`/equipments/api/v1/${id}`, formData, {
      headers: { "Content-Type": "multipart/form-data" },
    });

    return response.data;
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –∑ ID ${id}:`, error);
    throw error;
  }
};

export const uploadMainImage = async (id, file) => {
  try {
    const formData = new FormData();
    formData.append("main-image", file);

    const response = await apiClient.post(`/equipments/api/v1/${id}/images/main`, formData, {
      headers: {
        "Content-Type": "multipart/form-data",
      },
    });

    return response.data;
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –∑ ID ${id}:`, error);
    throw error;
  }
};

export const uploadAdditionalImages = async (id, files) => {
  try {
    const formData = new FormData();
    files.forEach((file) => formData.append("images", file));

    const response = await apiClient.post(`/equipments/api/v1/${id}/images`, formData,  {
      headers: {
        "Content-Type": "multipart/form-data",
      },
    });

    return response.data;
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –∑ ID ${id}:`, error);
    throw error;
  }
};